# Instru√ß√µes: Validar Conformidade Embrapa I/O

## Objetivo

Executar valida√ß√£o completa de conformidade de um projeto com a plataforma Embrapa I/O, gerando relat√≥rio detalhado com score e sugest√µes de corre√ß√£o.

## Conhecimento Necess√°rio

Antes de iniciar, voc√™ deve ter lido e compreendido:
- `knowledge/embrapa-io-fundamentals.md` - As 4 verdades fundamentais
- `knowledge/embrapa-io-validation.md` - Todas as 38 regras de valida√ß√£o
- `knowledge/embrapa-io-workflows.md` - Adapta√ß√£o por tipo de projeto

## Entrada

### Par√¢metros Obrigat√≥rios
- `project_path`: Caminho absoluto do projeto a ser validado

### Par√¢metros Opcionais
- `severity_levels`: Array de severidades a validar (padr√£o: todas)
- `auto_fix`: Boolean para aplicar corre√ß√µes autom√°ticas (padr√£o: false)

## Processo de Valida√ß√£o

### Passo 1: Detectar Tipo de Projeto

Analise o projeto e determine seu tipo:

```javascript
function detectProjectType(projectPath) {
  const hasDockerCompose = fs.existsSync(`${projectPath}/docker-compose.yaml`);
  const hasSettings = fs.existsSync(`${projectPath}/.embrapa/settings.json`);
  const hasEnvIo = fs.existsSync(`${projectPath}/.env.io.example`);

  if (hasSettings && hasEnvIo) {
    return 'ALREADY_COMPLIANT';
  } else if (hasDockerCompose) {
    return 'EXISTING';
  } else {
    return 'NEW';
  }
}
```

**Se tipo = 'NEW'**: Interromper valida√ß√£o e sugerir workflow `create-*`

**Sa√≠da do Passo 1**:
```json
{
  "project_type": "EXISTING|ALREADY_COMPLIANT",
  "detected_files": {
    "docker_compose": true|false,
    "env_io_example": true|false,
    "env_example": true|false,
    "settings_json": true|false
  }
}
```

---

### Passo 2: Validar docker-compose.yaml

Executar **14 valida√ß√µes** conforme `embrapa-io-validation.md` se√ß√£o "Valida√ß√£o 1":

#### CRITICAL (ID 1.1 - 1.5)
- [ ] 1.1 Arquivo existe
- [ ] 1.2 Campo 'version' ausente
- [ ] 1.3 Network 'stack' existe
- [ ] 1.4 Network 'stack' √© externa
- [ ] 1.5 Nome da network correto

#### HIGH (ID 1.6 - 1.10)
- [ ] 1.6 Todos os servi√ßos conectados √† 'stack'
- [ ] 1.7 Nenhum 'container_name'
- [ ] 1.8 Volumes externos
- [ ] 1.9 Servi√ßos com 'restart: unless-stopped'
- [ ] 1.10 Servi√ßos com 'healthcheck'

#### MEDIUM (ID 1.11 - 1.13)
- [ ] 1.11 Portas via vari√°veis
- [ ] 1.12 CLI com profiles
- [ ] 1.13 Volume backup existe

#### LOW (ID 1.14)
- [ ] 1.14 Servi√ßos CLI (backup, restore, sanitize)

**Sa√≠da do Passo 2**:
```json
{
  "category": "docker-compose",
  "status": "compliant|partial|non-compliant",
  "errors": [
    {
      "id": "1.6",
      "severity": "HIGH",
      "message": "Servi√ßo 'api' n√£o est√° conectado √† network 'stack'",
      "location": "docker-compose.yaml:15",
      "solution": "Adicionar 'stack' em 'networks:' do servi√ßo",
      "auto_fixable": true
    }
  ]
}
```

---

### Passo 3: Validar Arquivos .env

Executar **8 valida√ß√µes** conforme `embrapa-io-validation.md` se√ß√£o "Valida√ß√£o 2":

#### CRITICAL (ID 2.1 - 2.3)
- [ ] 2.1 .env.io.example existe
- [ ] 2.2 .env.example existe
- [ ] 2.3 Sem duplica√ß√£o de vari√°veis

#### HIGH (ID 2.4 - 2.6)
- [ ] 2.4 Vari√°veis obrigat√≥rias em .env.io
- [ ] 2.5 Valores sem espa√ßos/aspas
- [ ] 2.6 Conven√ß√£o de nomenclatura

#### MEDIUM (ID 2.7 - 2.8)
- [ ] 2.7 .gitignore ignora .env
- [ ] 2.8 Vari√°veis sens√≠veis com coment√°rio

**Sa√≠da do Passo 3**:
```json
{
  "category": "env-files",
  "status": "compliant|partial|non-compliant",
  "errors": [...],
  "required_vars_found": {
    "IO_PROJECT": true,
    "IO_APP": true,
    "IO_STAGE": true,
    "IO_VERSION": true
  }
}
```

---

### Passo 4: Validar .embrapa/settings.json

Executar **8 valida√ß√µes** conforme `embrapa-io-validation.md` se√ß√£o "Valida√ß√£o 3":

#### CRITICAL (ID 3.1 - 3.3)
- [ ] 3.1 Arquivo existe
- [ ] 3.2 JSON v√°lido
- [ ] 3.3 Campos obrigat√≥rios presentes (boilerplate, platform, label, description, references, maintainers, variables, orchestrators)

#### HIGH (ID 3.4 - 3.6)
- [ ] 3.4 platform v√°lida
- [ ] 3.5 variables.default presente e n√£o-vazio
- [ ] 3.6 Tipos de vari√°veis v√°lidos (TEXT, PASSWORD, SECRET, PORT, VOLUME, EMPTY)

#### MEDIUM (ID 3.7 - 3.8)
- [ ] 3.7 Vari√°veis sem espa√ßos ou aspas nos valores
- [ ] 3.8 references n√£o-vazio

**Sa√≠da do Passo 4**:
```json
{
  "category": "settings-json",
  "status": "compliant|partial|non-compliant",
  "errors": [...],
  "metadata": {
    "project_type": "backend",
    "stack": "nodejs",
    "compliance_version": "1.0"
  }
}
```

---

### Passo 5: Validar Integra√ß√µes

Executar **5 valida√ß√µes** conforme `embrapa-io-validation.md` se√ß√£o "Valida√ß√£o 4":

#### HIGH (ID 4.1 - 4.2)
- [ ] 4.1 Sentry configurado corretamente
- [ ] 4.2 Matomo tracking implementado

#### MEDIUM (ID 4.3 - 4.4)
- [ ] 4.3 Logo Embrapa presente
- [ ] 4.4 SonarQube configurado (se recomendado)

#### LOW (ID 4.5)
- [ ] 4.5 Grafana Loki configurado

**Sa√≠da do Passo 5**:
```json
{
  "category": "integrations",
  "status": "compliant|partial|non-compliant",
  "errors": [...],
  "integrations_status": {
    "sentry": "configured|missing",
    "matomo": "configured|missing",
    "sonarqube": "configured|missing|not-recommended",
    "loki": "configured|missing"
  }
}
```

---

### Passo 6: Calcular Compliance Score

Aplicar algoritmo:

```javascript
function calculateComplianceScore(allErrors) {
  const critical = allErrors.filter(e => e.severity === 'CRITICAL').length;
  const high = allErrors.filter(e => e.severity === 'HIGH').length;

  if (critical > 0 || high > 3) {
    return 'LOW';
  } else if (high > 0) {
    return 'MEDIUM';
  } else {
    return 'HIGH';
  }
}
```

**Sa√≠da do Passo 6**:
```json
{
  "compliance_score": "HIGH|MEDIUM|LOW",
  "summary": {
    "critical": 0,
    "high": 2,
    "medium": 5,
    "low": 3,
    "total": 10
  }
}
```

---

### Passo 7: Gerar Relat√≥rio

Criar dois formatos:

#### 7.1 Relat√≥rio JSON (validation-report-TIMESTAMP.json)

```json
{
  "project": {
    "name": "Nome do Projeto",
    "path": "/caminho/para/projeto",
    "type": "EXISTING"
  },
  "validation": {
    "timestamp": "2025-10-06T14:30:00Z",
    "score": "MEDIUM",
    "summary": {
      "critical": 0,
      "high": 2,
      "medium": 5,
      "low": 3,
      "total": 10
    }
  },
  "results": {
    "docker_compose": {...},
    "env_files": {...},
    "settings_json": {...},
    "integrations": {...}
  },
  "all_errors": [...]
}
```

#### 7.2 Relat√≥rio Markdown (compliance-summary-TIMESTAMP.md)

```markdown
# Relat√≥rio de Conformidade Embrapa I/O

**Projeto**: Nome do Projeto
**Data**: 2025-10-06 14:30:00
**Score**: üü° MEDIUM

## Resumo Executivo

- ‚úÖ 28 valida√ß√µes passaram
- ‚ö†Ô∏è 2 erros HIGH encontrados
- ‚ÑπÔ∏è 5 erros MEDIUM
- üí° 3 sugest√µes LOW

## Detalhamento por Categoria

### 1. docker-compose.yaml: üü¢ Compliant
Todas as valida√ß√µes passaram.

### 2. Arquivos .env: üü° Parcial
‚ö†Ô∏è **HIGH**: Vari√°vel 'DB_PASSWORD' cont√©m espa√ßos (ID 2.5)
‚ÑπÔ∏è **MEDIUM**: .gitignore n√£o ignora .env (ID 2.7)

### 3. .embrapa/settings.json: üü¢ Compliant
Todas as valida√ß√µes passaram.

### 4. Integra√ß√µes: üî¥ N√£o Conforme
‚ö†Ô∏è **HIGH**: Sentry habilitado mas c√≥digo n√£o encontrado (ID 4.1)
‚ö†Ô∏è **HIGH**: Matomo tracking n√£o implementado (ID 4.2)

## Pr√≥ximos Passos

1. **ALTA PRIORIDADE** - Corrigir erros HIGH:
   - Remover espa√ßos da vari√°vel DB_PASSWORD em .env.example
   - Implementar integra√ß√£o Sentry conforme knowledge/embrapa-io-integrations.md
   - Adicionar tracking Matomo no frontend

2. **M√âDIA PRIORIDADE** - Corrigir erros MEDIUM:
   - Adicionar .env ao .gitignore
   - ...

3. **BAIXA PRIORIDADE** - Melhorias sugeridas:
   - Considerar configurar Grafana Loki
   - ...
```

---

### Passo 8: Sugerir Corre√ß√µes

Para cada erro encontrado, sugerir:

1. **Descri√ß√£o clara** do problema
2. **Solu√ß√£o espec√≠fica** com exemplo de c√≥digo
3. **Indica√ß√£o de auto-fixable** (sim/n√£o)
4. **Workflow relacionado** (se aplic√°vel)

**Exemplo de sugest√£o**:
```json
{
  "error_id": "1.6",
  "suggestion": {
    "problem": "Servi√ßo 'api' n√£o est√° conectado √† network 'stack'",
    "solution": "Adicione a seguinte configura√ß√£o ao servi√ßo 'api' no docker-compose.yaml:\n\nnetworks:\n  - stack",
    "auto_fixable": true,
    "related_workflow": null
  }
}
```

---

### Passo 9: Aplicar Auto-Fixes (Opcional)

**Condi√ß√£o**: `auto_fix == true` E erro marcado como `auto_fixable == true`

Corre√ß√µes autom√°ticas poss√≠veis:
- Remover campo 'version' do docker-compose.yaml
- Adicionar network 'stack' externa
- Adicionar 'external: true' a volumes
- Criar arquivos .env.example ausentes
- Adicionar .env ao .gitignore
- Criar .embrapa/settings.json com estrutura base

**Para cada auto-fix aplicado**:
1. Criar backup do arquivo original
2. Aplicar modifica√ß√£o
3. Validar syntax do arquivo modificado
4. Adicionar ao log de mudan√ßas

**Sa√≠da do Passo 9**:
```json
{
  "auto_fixes_applied": [
    {
      "error_id": "1.2",
      "file": "docker-compose.yaml",
      "action": "Removed 'version' field",
      "backup": "/tmp/backup/docker-compose.yaml.bak",
      "success": true
    }
  ]
}
```

---

## Sa√≠da Final

### validation-report-TIMESTAMP.json
Relat√≥rio JSON completo com todos os dados estruturados

### compliance-summary-TIMESTAMP.md
Relat√≥rio Markdown humanizado para leitura

### Console Output
```
üéØ Valida√ß√£o de Conformidade Embrapa I/O

üìÇ Projeto: Nome do Projeto
üìç Caminho: /caminho/para/projeto
üè∑Ô∏è  Tipo: EXISTING

üîç Executando valida√ß√µes...
‚úÖ docker-compose.yaml (14 regras)
‚ö†Ô∏è  Arquivos .env (8 regras) - 2 erros
‚úÖ .embrapa/settings.json (8 regras)
‚ùå Integra√ß√µes (5 regras) - 2 erros

üìä Compliance Score: üü° MEDIUM

üìù Relat√≥rios gerados:
- /caminho/validation-report-2025-10-06-143000.json
- /caminho/compliance-summary-2025-10-06-143000.md

üí° Pr√≥ximos passos:
1. Corrigir 2 erros HIGH
2. Considerar corrigir 5 erros MEDIUM
3. Opcionalmente implementar 3 sugest√µes LOW
```

---

## Notas Importantes

- **SEMPRE** ler o arquivo completo antes de validar
- **SEMPRE** seguir as 38 regras de valida√ß√£o exatamente como documentadas
- **SEMPRE** gerar relat√≥rios nos dois formatos (JSON + Markdown)
- **SEMPRE** indicar pr√≥ximos passos claros e priorizados
- **NUNCA** inventar regras de valida√ß√£o n√£o documentadas
- **NUNCA** aplicar auto-fix sem criar backup

---

**Vers√£o**: 1.0
**√öltima atualiza√ß√£o**: 2025-10-06
**Autor**: M√≥dulo Embrapa I/O BMAD
